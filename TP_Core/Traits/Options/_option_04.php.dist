<?php
/**
 * Created by PhpStorm.
 * User: Aad Pouw
 * Date: 5-3-2022
 * Time: 18:34
 */
namespace TP_Includes\Factory\Options;
use TP_Includes\Factory\Inits\_init_db;
use TP_Includes\Factory\Inits\_init_settings;

if(ABSPATH){
    trait _option_04 {
        use _init_db;
        use _init_settings;
        protected function _register_initial_settings(){
            $this->_register_setting(
                'general','blogname',['show_in_rest' => ['name' => 'title',],
                    'type'=> 'string','description'  => $this->__( 'Site title.' ),]
            );
            $this->_register_setting(
                'general','blogdescription',
                ['show_in_rest' => ['name' => 'description',],
                    'type' => 'string','description' => $this->__( 'Site tagline.' ),]
            );
            if ( ! $this->_is_multisite() )
                $this->_register_setting(
                    'general','siteurl',
                    ['show_in_rest' => ['name' => 'url', 'schema' => ['format' => 'uri',], ],
                        'type' => 'string','description'  => $this->__( 'Site URL.' ),]
                );
            if ( ! $this->_is_multisite() )
                $this->_register_setting(
                    'general', 'admin_email',
                    ['show_in_rest' => ['name' => 'email','schema' => ['format' => 'email',],],
                        'type' => 'string', 'description'  => $this->__( 'This address is used for admin purposes, like new user notification.' ),]
                );
            $this->_register_setting(
                'general','timezone_string', ['show_in_rest' => ['name' => 'timezone',],
                    'type' => 'string', 'description'  => $this->__( 'A city in the same timezone as you.' ),]
            );
            $this->_register_setting(
                'general','date_format',
                ['show_in_rest' => true,'type' => 'string','description' => $this->__( 'A date format for all date strings.' ),]
            );
            $this->_register_setting(
                'general', 'time_format',
                ['show_in_rest' => true, 'type'=> 'string','description'  => $this->__( 'A time format for all time strings.' ),]
            );
            $this->_register_setting(
                'general', 'start_of_week',
                ['show_in_rest' => true,'type' => 'integer','description' => $this->__( 'A day number of the week that the week should start on.' ),]
            );
            $this->_register_setting(
                'general',
                'TPLANG',
                ['show_in_rest' => [ 'name' => 'language',], 'type' => 'string','description' => $this->__( 'TailoredPress locale code.' ),'default' => 'en_US',]
            );
            $this->_register_setting(
                'writing','use_smilies',
                ['show_in_rest' => true, 'type' => 'boolean', 'description'  => $this->__( 'Convert emoticons like :-) and :-P to graphics on display.' ), 'default' => true,]
            );
            $this->_register_setting(
                'writing','default_category',
                ['show_in_rest' => true,'type' => 'integer','description' => $this->__( 'Default post category.' ),]
            );
            $this->_register_setting(
                'writing','default_post_format',
                ['show_in_rest' => true,'type' => 'string', 'description' => $this->__( 'Default post format.' ),]
            );
            $this->_register_setting(
                'reading','posts_per_page',
                ['show_in_rest' => true,'type' => 'integer','description'  => $this->__( 'Blog pages show at most.' ), 'default' => 10,]
            );
            $this->_register_setting(
                'discussion','default_ping_status',
                ['show_in_rest' => ['schema' => [ 'enum' => ['open', 'closed'],],],'type'=> 'string',
                    'description'  => $this->__( 'Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.' ), ]
            );
            $this->_register_setting(
                'discussion', 'default_comment_status',
                ['show_in_rest' => ['schema' => ['enum' => ['open', 'closed'],],],
                    'type' => 'string', 'description'  => $this->__( 'Allow people to submit comments on new posts.' ),]
            );
        }//2064
        protected function _register_setting( $option_group, $option_name,array ...$args) {
            $this->__tp_new_whitelist_options = &$this->__tp_new_allowed_options;
            $defaults = ['type' => 'string','group' => $option_group,'description' => '','sanitize_callback' => null,'show_in_rest' => false,];
            $args = $this->apply_filters( 'register_setting_args', $args, $defaults, $option_group, $option_name );
            $args = $this->_tp_parse_args( $args, $defaults );
            if ( false !== $args['show_in_rest'] && 'array' === $args['type'] && ( ! is_array( $args['show_in_rest'] ) || ! isset( $args['show_in_rest']['schema']['items'] ) ) )
                $this->_doing_it_wrong( __FUNCTION__, $this->__( 'When registering an "array" setting to show in the REST API, you must specify the schema for each array item in "show_in_rest.schema.items".' ), '0.0.1' );
            if ( ! is_array( $this->__tp_registered_settings ) ) $this->__tp_registered_settings = [];
            $new_allowed_options[ $option_group ][] = $option_name;
            if ( ! empty( $args['sanitize_callback'] ) )
                $this->add_filter( "sanitize_option_{$option_name}", $args['sanitize_callback'] );
            if ( array_key_exists( 'default', $args ) )
                $this->add_filter( "default_option_{$option_name}", 'filter_default_option', 10, 3 );
            $this->do_action( 'register_setting', $option_group, $option_name, $args );
            $this->__tp_registered_settings[ $option_name ] = $args;
        }//2279
        protected function _unregister_setting( $option_group, $option_name){
            $this->__tp_new_whitelist_options = &$this->__tp_new_allowed_options;
            $pos = array_search( $option_name, (array) $this->__tp_new_allowed_options[ $option_group ], true );
            if ( false !== $pos ) unset( $this->__tp_new_allowed_options[ $option_group ][ $pos ] );
            if ( isset( $this->__tp_registered_settings[ $option_name ] ) ) {
                if ( ! empty( $this->__tp_registered_settings[ $option_name ]['sanitize_callback'] ) )
                    $this->remove_filter( "sanitize_option_{$option_name}", $this->__tp_registered_settings[ $option_name ]['sanitize_callback'] );
                if ( array_key_exists( 'default', $this->__tp_registered_settings[ $option_name ] ) )
                    $this->remove_filter( "default_option_{$option_name}", 'filter_default_option', 10 );
                $this->do_action( 'unregister_setting', $option_group, $option_name );
                unset( $this->__tp_registered_settings[ $option_name ] );
            }
        }//2390
        protected function _get_registered_settings(){
            if ( ! is_array( $this->__tp_registered_settings ) ) return [];
            return $this->__tp_registered_settings;
        }//2479
        protected function _filter_default_option( $default, $option, $passed_default ){
            if ( $passed_default ) return $default;
            $registered = $this->_get_registered_settings();
            if ( empty( $registered[ $option ] ) ) return $default;
            return $registered[ $option ]['default'];
        }//2502
        //todo removing below
        /** @deprecated  */
        /**
         * @param $option
         * @param string $value
         * @param string $autoload
         * @return string
         */
        public function add_option( $option, $value = '', $autoload = 'yes' ){
            return '';
        }//567
        /** @deprecated  */
        /**
         * @param $option
         * @param $value
         */
        public function add_site_option( $option, $value ) {}//1321
        /** @deprecated  */
        /**
         * @param $option
         * @return string
         */
        public function delete_option( $option ){
            return '';

        }//696
        /** @deprecated  */
        /**
         * @param $option
         * @param bool $default
         * @return string
         */
        public function get_option( $option, $default= false){
            //$this->_get_option($option, $default)
            return '';

        }//77
        /** @deprecated  */
        /**
         * @param $option
         * @param bool $default
         */
        public function get_site_option( $option, $default = false ){}//1303 moved out $deprecated = true
        /** @deprecated  */
        /**
         * @param $option
         * @param $value
         * @param null $autoload
         * @return string
         */
        public function update_option( $option, $value, $autoload = null ) {
            return '';
        }//381
        /** @deprecated  */
        /**
         * @param $option
         * @param $value
         */
        public function update_site_option( $option, $value ) {}//1352
    }
}else die;