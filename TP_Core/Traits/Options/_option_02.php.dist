<?php
/**
 * Created by PhpStorm.
 * User: Aad Pouw
 * Date: 5-3-2022
 * Time: 18:34
 */
namespace TP_Includes\Factory\Options;
use TP_Includes\Factory\Inits\_init_db;
use TP_Includes\Factory\Inits\_init_settings;
if(ABSPATH){
    trait _option_02 {
        use _init_db;
        use _init_settings;
        protected function _set_transient( $transient, $value, $expiration = 0 ){
            $expiration = (int) $expiration;
            $value = $this->apply_filters( "pre_set_transient_{$transient}", $value, $expiration, $transient );
            $expiration = $this->apply_filters( "expiration_of_transient_{$transient}", $expiration, $value, $transient );
            $result = null;
            if ( $this->_tp_using_ext_object_cache() || $this->_tp_installing() )
                $result = $this->_tp_cache_set( $transient, $value, 'transient', $expiration );
            else {
                $transient_timeout = '_transient_timeout_' . $transient;
                $transient_option  = '_transient_' . $transient;
                if ( false === $this->_get_option( $transient_option ) ) {
                    $autoload = 'yes';
                    if ( $expiration ) {
                        $autoload = 'no';
                        $this->_add_option( $transient_timeout, time() + $expiration, 'no' );
                    }
                    $result = $this->_add_option( $transient_option, $value, $autoload );
                } else {
                    $update = true;
                    if ( $expiration ) {
                        if ( false === $this->_get_option( $transient_timeout ) ) {
                            $this->_delete_option( $transient_option );
                            $this->_add_option( $transient_timeout, time() + $expiration, 'no' );
                            $result = $this->_add_option( $transient_option, $value, 'no' );
                            $update = false;
                        } else $this->_update_option( $transient_timeout, time() + $expiration );
                    }
                    if ( $update )
                        $result = $this->_update_option( $transient_option, $value );
                }
            }
            if ( $result ) {
                $this->do_action( "set_transient_{$transient}", $value, $expiration, $transient );
                $this->do_action( 'setted_transient', $transient, $value, $expiration );
            }
            return $result;
        }//901
        protected function _delete_expired_transients( $force_db = false ){
            $tpdb = $this->__init_db();
            if ( ! $force_db && $this->_tp_using_ext_object_cache() ) return;
            $tpdb->query(
                $tpdb->prepare(TP_DELETE . " a, b FROM {$tpdb->options} a, {$tpdb->options} b
			WHERE a.option_name LIKE %s AND a.option_name NOT LIKE %s
			AND b.option_name = CONCAT( '_transient_timeout_', SUBSTRING( a.option_name, 12 ) )
			AND b.option_value < %d", $tpdb->esc_like( '_transient_' ) . '%', $tpdb->esc_like( '_transient_timeout_' ) . '%', time()));
            if ( ! $this->_is_multisite() ) {
                // Single site stores site transients in the options table.
                $tpdb->query( $tpdb->prepare( TP_DELETE . " a, b FROM {$tpdb->options} a, {$tpdb->options} b
				WHERE a.option_name LIKE %s	AND a.option_name NOT LIKE %s
				AND b.option_name = CONCAT( '_site_transient_timeout_', SUBSTRING( a.option_name, 17 ) )
				AND b.option_value < %d", $tpdb->esc_like( '_site_transient_' ) . '%', $tpdb->esc_like( '_site_transient_timeout_' ) . '%', time()));
            } elseif ( $this->_is_multisite() && $this->_is_main_site() && $this->_is_main_network() ) {
                // Multisite stores site transients in the sitemeta table.
                $tpdb->query($tpdb->prepare(TP_DELETE . " a, b FROM {$tpdb->site_meta} a, {$tpdb->site_meta} b
				WHERE a.meta_key LIKE %s AND a.meta_key NOT LIKE %s
				AND b.meta_key = CONCAT( '_site_transient_timeout_', SUBSTRING( a.meta_key, 17 ) )
				AND b.meta_value < %d", $tpdb->esc_like( '_site_transient_' ) . '%', $tpdb->esc_like( '_site_transient_timeout_' ) . '%', time()));
            }
        }//1011
        protected function _tp_user_settings() {
            if ( ! $this->_is_admin() || $this->_tp_doing_ajax() ) return;
            $user_id = $this->_get_current_user_id();
            if ( ! $user_id ) return;
            if ( ! $this->_is_user_member_of_blog() ) return;
            $settings = (string) $this->_get_user_option( 'user-settings', $user_id );
            if ( isset( $_COOKIE[ 'tp-settings-' . $user_id ] ) ) {
                $cookie = preg_replace( '/[^A-Za-z0-9=&_]/', '', $_COOKIE[ 'tp-settings-' . $user_id ] );
                // No change or both empty.
                if ( $cookie == $settings ) return;
                $last_saved = (int) $this->_get_user_option( 'user-settings-time', $user_id );
                $current    = isset( $_COOKIE[ 'tp-settings-time-' . $user_id ] ) ? preg_replace( '/[^0-9]/', '', $_COOKIE[ 'tp-settings-time-' . $user_id ] ) : 0;
                // The cookie is newer than the saved value. Update the user_option and leave the cookie as-is.
                if ( $current > $last_saved ) {
                    $this->_update_user_option( $user_id, 'user-settings', $cookie, false );
                    $this->_update_user_option( $user_id, 'user-settings-time', time() - 5, false );
                    return;
                }
            }
            // The cookie is not set in the current browser or the saved value is newer.
            $secure = ( 'https' === parse_url( $this->_admin_url(), PHP_URL_SCHEME ) );
            setcookie( 'tp-settings-' . $user_id, $settings, time() + YEAR_IN_SECONDS, SITE_COOKIE_PATH, null, $secure );
            setcookie( 'tp-settings-time-' . $user_id, time(), time() + YEAR_IN_SECONDS, SITE_COOKIE_PATH, null, $secure );
            $_COOKIE[ 'tp-settings-' . $user_id ] = $settings;
        }//1071
        protected function _get_user_setting( $name, $default = false ){
            $all_user_settings = $this->_get_all_user_settings();
            return isset( $all_user_settings[ $name ] ) ? $all_user_settings[ $name ] : $default;
        }//1123
        protected function _set_user_setting( $name, $value ){
            if ( headers_sent() ) return false;
            $all_user_settings          = $this->_get_all_user_settings();
            $all_user_settings[ $name ] = $value;
            return $this->_tp_set_all_user_settings( $all_user_settings );
        }//1143
        protected function _delete_user_setting( $names ){
            if ( headers_sent() ) return false;
            $all_user_settings = $this->_get_all_user_settings();
            $names             = (array) $names;
            $deleted           = false;
            foreach ( $names as $name ) {
                if ( isset( $all_user_settings[ $name ] ) ) {
                    unset( $all_user_settings[ $name ] );
                    $deleted = true;
                }
            }
            if ( $deleted ) return $this->_tp_set_all_user_settings( $all_user_settings );
            return false;
        }//1167
        protected function _get_all_user_settings(){
            $user_id = $this->_get_current_user_id();
            if ( ! $user_id ) return [];
            if ( isset( $this->__tp_updated_user_settings ) && is_array( $this->__tp_updated_user_settings ) )
                return $this->__tp_updated_user_settings;
            $user_settings = [];
            if ( isset( $_COOKIE[ 'tp-settings-' . $user_id ] ) ) {
                $cookie = preg_replace( '/[^A-Za-z0-9=&_-]/', '', $_COOKIE[ 'tp-settings-' . $user_id ] );
                if ( strpos( $cookie, '=' ) ) parse_str( $cookie, $user_settings );
            } else {
                $option = $this->_get_user_option( 'user-settings', $user_id );
                if ( $option && is_string( $option ) ) parse_str( $option, $user_settings );
            }
            $this->__tp_updated_user_settings = $user_settings;
            return $user_settings;
        }//1199
        protected function _tp_set_all_user_settings( $user_settings ){
            $user_id = $this->_get_current_user_id();
            if ( ! $user_id ) return false;
            if ( ! $this->_is_user_member_of_blog() ) return false;
            $settings = '';
            foreach ( $user_settings as $name => $value ) {
                $_name  = preg_replace( '/[^A-Za-z0-9_-]+/', '', $name );
                $_value = preg_replace( '/[^A-Za-z0-9_-]+/', '', $value );
                if ( ! empty( $_name ) ) $settings .= $_name . '=' . $_value . '&';
            }
            $settings = rtrim( $settings, '&' );
            parse_str( $settings, $this->__tp_updated_user_settings );
            $this->_update_user_option( $user_id, 'user-settings', $settings, false );
            $this->_update_user_option( $user_id, 'user-settings-time', time(), false );
            return true;
        }//1243
        protected function _delete_all_user_settings(){
            $user_id =  $this->_get_current_user_id();
            if ( ! $user_id ) return;
            $this->_update_user_option( $user_id, 'user-settings', '', false );
            setcookie( 'tp-settings-' . $user_id, ' ', time() - YEAR_IN_SECONDS, SITE_COOKIE_PATH );
        }//1279
        protected function _get_site_option( $option, $default = false, $deprecated = true ) {
            return $this->_get_network_option( null, $option, $default );
        }//1303
    }
}else die;