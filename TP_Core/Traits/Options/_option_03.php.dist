<?php
/**
 * Created by PhpStorm.
 * User: Aad Pouw
 * Date: 5-3-2022
 * Time: 18:34
 */
namespace TP_Includes\Factory\Options;
use TP_Includes\Factory\Inits\_init_db;
if(ABSPATH){
    trait _option_03 {
        use _init_db;
        protected function _add_site_option( $option, $value ) {
            return $this->_add_network_option( null, $option, $value );
        }//1321
        protected function _delete_site_option( $option ){
            return $this->_delete_network_option( null, $option );
        }//1336
        protected function _update_site_option( $option, $value ) {
            return $this->_update_network_option( null, $option, $value );
        }
        protected function _get_network_option( $network_id, $option, $default = false ){
            $tpdb = $this->__init_db();
            if ( $network_id && ! is_numeric( $network_id ) ) return false;
            $network_id = (int) $network_id;
            if ( ! $network_id ) $network_id = $this->_get_current_network_id();
            $pre = $this->apply_filters( "pre_site_option_{$option}", false, $option, $network_id, $default );
            if ( false !== $pre ) return $pre;
            $not_options_key = "$network_id:not_options";
            $not_options     = $this->_tp_cache_get( $not_options_key, 'site-options' );
            if ( is_array( $not_options ) && isset( $not_options[ $option ] ) )
                return $this->apply_filters( "default_site_option_{$option}", $default, $option, $network_id );
            if ( ! $this->_is_multisite() ) {
                $default = $this->apply_filters( 'default_site_option_' . $option, $default, $option, $network_id );
                $value   = $this->_get_option( $option, $default );
            }else{
                $cache_key = "$network_id:$option";
                $value     = $this->_tp_cache_get( $cache_key, 'site-options' );
                if ( ! isset( $value ) || false === $value ) {
                    $row = $tpdb->get_row( $tpdb->prepare( TP_SELECT . " meta_value FROM $tpdb->site_meta WHERE meta_key = %s AND site_id = %d", $option, $network_id ) );
                    if( $row instanceof \stdClass );
                    if ( is_object( $row ) ) {
                        $value = $row->meta_value;
                        $value = $this->_maybe_unserialize( $value );
                        $this->_tp_cache_set( $cache_key, $value, 'site-options' );
                    }else {
                        if ( ! is_array( $not_options ) ) $not_options = [];
                        $not_options[ $option ] = true;
                        $this->_tp_cache_set( $not_options_key, $not_options, 'site-options' );
                        $value = $this->apply_filters( 'default_site_option_' . $option, $default, $option, $network_id );
                    }
                }
            }
            if ( ! is_array( $not_options ) ) {
                $not_options = [];
                $this->_tp_cache_set( $not_options_key, $not_options, 'site-options' );
            }
            return $this->apply_filters( "site_option_{$option}", $value, $option, $network_id );
        }//1370
        protected function _add_network_option( $network_id, $option, $value ) {
            $tpdb = $this->__init_db();
            if ( $network_id && ! is_numeric( $network_id ) ) return false;
            $network_id = (int) $network_id;
            if ( ! $network_id ) $network_id = $this->_get_current_network_id();
            $this->_tp_protect_special_option( $option );
            $value = $this->apply_filters( "pre_add_site_option_{$option}", $value, $option, $network_id );
            $notoptions_key = "$network_id:notoptions";
            if ( ! $this->_is_multisite() )
                $result = $this->_add_option( $option, $value, 'no' );
            else {
                $cache_key = "$network_id:$option";
                $notoptions = $this->_tp_cache_get( $notoptions_key, 'site-options' );
                if ( ! is_array( $notoptions ) || ! isset( $notoptions[ $option ] ) ) {
                    if ( false !== $this->_get_network_option( $network_id, $option, false ) )
                        return false;
                }
                $value = $this->_sanitize_option( $option, $value );
                $serialized_value = $this->_maybe_serialize( $value );
                $result           = $tpdb->insert(
                    $tpdb->site_meta,
                    ['site_id' => $network_id,'meta_key' => $option,'meta_value' => $serialized_value,]
                );
                if ( ! $result ) return false;
                $this->_tp_cache_set( $cache_key, $value, 'site-options' );
                $notoptions = $this->_tp_cache_get( $notoptions_key, 'site-options' ); // Yes, again... we need it to be fresh.
                if ( is_array( $notoptions ) && isset( $notoptions[ $option ] ) ) {
                    unset( $notoptions[ $option ] );
                    $this->_tp_cache_set( $notoptions_key, $notoptions, 'site-options' );
                }
            }
            if ( $result ) {
                $this->do_action( "add_site_option_{$option}", $option, $value, $network_id );
                $this->do_action( 'add_site_option', $option, $value, $network_id );
                return true;
            }
            return false;
        }//1504
        protected function _delete_network_option( $network_id, $option ){
            $tpdb = $this->__init_db();
            if ( $network_id && ! is_numeric( $network_id ) ) return false;
            $network_id = (int) $network_id;
            if ( ! $network_id ) $network_id = $this->_get_current_network_id();
            $this->do_action( "pre_delete_site_option_{$option}", $option, $network_id );
            if ( ! $this->_is_multisite() ) {
                $result = $this->_delete_option( $option );
            } else {
                $row = $tpdb->get_row( $tpdb->prepare( TP_SELECT . " meta_id FROM {$tpdb->site_meta} WHERE meta_key = %s AND site_id = %d", $option, $network_id ) );
                if($row  instanceof \stdClass );//todo let see or it is working this way???
                if ( is_null( $row ) || ! $row->meta_id ) return false;
                $cache_key = "$network_id:$option";
                $this->_tp_cache_delete( $cache_key, 'site-options' );
                $result = $tpdb->delete(
                    $tpdb->site_meta,
                    ['meta_key' => $option, 'site_id' => $network_id,]
                );
            }
            if ( $result ) {
                $this->do_action( "delete_site_option_{$option}", $option, $network_id );
                $this->do_action( 'delete_site_option', $option, $network_id );
                return true;
            }
            return false;
        }//1628
        protected function _update_network_option( $network_id, $option, $value ){
            $tpdb = $this->__init_db();
            if ( $network_id && ! is_numeric( $network_id ) ) return false;
            $network_id = (int) $network_id;
            if ( ! $network_id ) $network_id = $this->_get_current_network_id();
            $this->_tp_protect_special_option( $option );
            $old_value = $this->_get_network_option( $network_id, $option, false );
            $value = $this->apply_filters( "pre_update_site_option_{$option}", $value, $old_value, $option, $network_id );
            if ( $value === $old_value || $this->_maybe_serialize( $value ) === $this->_maybe_serialize( $old_value ) )
                return false;
            if ( false === $old_value ) return $this->_add_network_option( $network_id, $option, $value );
            $notoptions_key = "$network_id:notoptions";
            $notoptions     = $this->_tp_cache_get( $notoptions_key, 'site-options' );
            if ( is_array( $notoptions ) && isset( $notoptions[ $option ] ) ) {
                unset( $notoptions[ $option ] );
                $this->_tp_cache_set( $notoptions_key, $notoptions, 'site-options' );
            }
            if ( ! $this->_is_multisite() ) $result = $this->_update_option( $option, $value, 'no' );
            else{
                $value = $this->_sanitize_option( $option, $value );
                $serialized_value = $this->_maybe_serialize( $value );
                $result = $tpdb->update($tpdb->site_meta,['meta_value' => $serialized_value],['site_id' => $network_id,'meta_key' => $option,]);
                if ( $result ) {
                    $cache_key = "$network_id:$option";
                    $this->_tp_cache_set( $cache_key, $value, 'site-options' );
                }
            }
            if ( $result ) {
                $this->do_action( "update_site_option_{$option}", $option, $value, $old_value, $network_id );
                $this->do_action( 'update_site_option', $option, $value, $old_value, $network_id );
                return true;
            }
            return false;
        }//1722
        protected function _delete_site_transient( $transient ){
            $this->do_action( "delete_site_transient_{$transient}", $transient );
            if ( $this->_tp_using_ext_object_cache() || $this->_tp_installing() )
                $result = $this->_tp_cache_delete( $transient, 'site-transient' );
            else {
                $option_timeout = '_site_transient_timeout_' . $transient;
                $option         = '_site_transient_' . $transient;
                $result         = $this->_delete_site_option( $option );
                if ( $result ) $this->_delete_site_option( $option_timeout );
            }
            if ( $result ) $this->do_action( 'deleted_site_transient', $transient );
            return $result;
        }//1848
        protected function _get_site_transient( $transient ){
            $pre = $this->apply_filters( "pre_site_transient_{$transient}", false, $transient );
            if ( false !== $pre ) return $pre;
            if ( $this->_tp_using_ext_object_cache() || $this->_tp_installing() )
                $value = $this->_tp_cache_get( $transient, 'site-transient' );
            else {
                $no_timeout       = ['update_core', 'update_plugins', 'update_themes'];
                $transient_option = '_site_transient_' . $transient;
                if ( ! in_array( $transient, $no_timeout, true ) ) {
                    $transient_timeout = '_site_transient_timeout_' . $transient;
                    $timeout           = $this->_get_site_option( $transient_timeout );
                    if ( false !== $timeout && $timeout < time() ) {
                        $this->_delete_site_option( $transient_option );
                        $this->_delete_site_option( $transient_timeout );
                        $value = false;
                    }
                }
                if ( ! isset( $value ) ) $value = $this->_get_site_option( $transient_option );
            }
            return $this->apply_filters( "site_transient_{$transient}", $value, $transient );
        }//1901
        protected function _set_site_transient( $transient, $value, $expiration = 0 ){
            $value = $this->apply_filters( "pre_set_site_transient_{$transient}", $value, $transient );
            $expiration = (int) $expiration;
            $expiration = $this->apply_filters( "expiration_of_site_transient_{$transient}", $expiration, $value, $transient );
            if ( $this->_tp_using_ext_object_cache() || $this->_tp_installing() )
                $result = $this->_tp_cache_set( $transient, $value, 'site-transient', $expiration );
            else {
                $transient_timeout = '_site_transient_timeout_' . $transient;
                $option            = '_site_transient_' . $transient;
                if ( false === $this->_get_site_option( $option ) ) {
                    if ( $expiration ) $this->_add_site_option( $transient_timeout, time() + $expiration );
                    $result = $this->_add_site_option( $option, $value );
                } else {
                    if ( $expiration ) $this->_update_site_option( $transient_timeout, time() + $expiration );
                    $result = $this->_update_site_option( $option, $value );
                }
            }
            if ( $result ) {
                $this->do_action( "set_site_transient_{$transient}", $value, $expiration, $transient );
                $this->do_action( 'settled_site_transient', $transient, $value, $expiration );
            }
            return $result;
        }//1976
    }
}else die;